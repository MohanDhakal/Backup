Row Sets:
--------------------
Scrollable result set have a drawback, we need to keep the database connection open during the entire user interaction.
A more powerful approach is using the row set where we don't need to keep the database connection open.

RowSet interface extends the ResultSet interface.
javax.sql.rowset package provides the following interfaces that extend the RowSet interface.
1. CachedRowSet -->contains all data from a result set. We can close the connection and still use the row set. We can even modify the data in a cached row set. However, the modifications are not immediately reflected in the database. We need to reconnect to the database.
2. WebRowSet--> is a cached row set that can be saved to an XML file.
3. FilteredRowSet and JoinRowSet--> support operations that are equivalent to SELECT and JOIN operations.
4. JdbcRowSet-->adds getters and setters from the RowSet interface, turning a result set into a bean.

Creating CachedRowSet: (javax.sql.rowset)
----------------------------------

String sql="select * from tbltest";
ResultSet rs=st.executeQuery(sql);
CachedRowSet crs=new com.sun.rowset.CachedRowSetImpl();
crs.populate(rs);
con.close();


or:
------------------------
crs.setURL("jdbc:odbc:mydatasource");
crs.setUserName("sa");
crs.setPassword("password");
crs.setCommand("select * from tblname where id=?);
crs.setInt(1,id);
crs.execute();



Note: 
---------------
We can modify the row set with same methods for result set. After modification we must write it back to the database by calling:
crs.acceptChanges(con);


Specifying page size:
----------------------------
if the query result is very large we may limit the number of rows:

crs.setPageSize(20);


Here we will get only 20 rows. To get next rows we need to call
crs.nextPage();

