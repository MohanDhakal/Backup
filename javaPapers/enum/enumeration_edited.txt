Enumeration:
---------------------------
-->Simply an enumeration is a list of named constants.
-->"enum" keyword is used to create an enumeration.
For eg. 
enum Weekdays{Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday}

-->The enumeration constants are public and static by default.
-->Enumeration variable can be declared as
	Weekdays day;
	day=Weekdays.Sunday; 
     [Note: day1 can be assigned only with days declared]
-->Comparison
	if(day1==Weekdays.Monday)
        or, 
	switch(day1){
	   case Sunday:
		....
	}
-->In Java, an enumeration can have constructors, methods, and instance variables.
-------------------------------------------------------
The values() and valueOf() methods:
-----------------------------------
--> public static enum-type[] values() 
	returns an array that contains a list of enumeration constants.

    public static enum-type valueOf(String str)
	returns the enumeration constant whose value corresponds to the string passed in str.

------------------------------------------------------
 specifying initial value to the enum constants
-----------------------------------------------
class EnumExample4{  
enum Season{   
    WINTER(5), SPRING(10), SUMMER(15), FALL(20);   
  private int value;  
  private Season(int value){  
      this.value=value;  
   }  
 }  
  public static void main(String args[]){  
    for (Season s : Season.values()) {  
      System.out.println(s+" "+s.value);  
    }
  }
}  


Enumerations Inherit Enum:
-------------------------------
-->during declaring an enum, we can't inherit a superclass. 
-->All enumerations automatically inherit one class    java.lang.Enum.
-->Some of the method of Enum class:
	a. final int ordinal()
	-->returns the ordinal value of invoking constant.

        b. final int compareTo(enum-type e)
	--> Returns 0, negative or positive value.

	c. boolean equals(enum-type e)

Type Wrappers (Wrapper classes)
-------------------------------
-->Type wrappers are classes that encapsulate a primitive type within an object.
-->Double, Float, Long, Integer, Short, Byte, Character and    Boolean.
-->Are important when we need to pass a value by reference. Primitive types are passed by value.

    Integer ob=new Integer(100);
    int i=ob.intValue();
  -->the above code fragment wraps the integer value 100 inside an Integer object called ob.
   -->The process of encapsulating a value within an object is called boxing.
  -->The process of extracting a value from a type wrapper is called unboxing.

Autoboxing:
---------------
-->Autoboxing is the process by which a primitive type is automatically encapsulated into its equivalent type wrapper whenever an object of that type is needed. There is no need to explicitly construct an object.
	For eg: 
		Integer ob=100;  //autoboxing
-->Auto-unboxing is the process by which a boxed object is automatically extracted from a type wrapper when its value is needed. There is no need to call a method like intValue() or doubleValue().
	For eg:
		Integer ob=100;  //autoboxing
		int i=ob; //auto-unboxing

Autoboxing and Methods:
-----------------------------
-->In methods autoboxing and auto-unboxing are applied.
eg. class Test{
	static int check(Integer m) {
		return m; //m is auto-unboxed to int
	}
	public static void main(String args[]){
		int a=check(120);//120 is autoboxed to Integer	
		System.out.println(a);
	}
   }


Annotation (Metadata)
------------------------------
-->Java Annotation is a tag that represents the metadata i.e. attached with class, interface, methods or fields to indicate some additional information which can be used by java compiler and JVM.


Java Custom Annotation
-----------------------
Java Custom annotations or Java User-defined annotations are easy to create and use. The @interface element is used to declare an annotation. For example:

@interface MyAnnotation{}  
Here, MyAnnotation is the custom annotation name.

Types of Annotation
-----------------------
There are three types of annotations.
Marker Annotation
Single-Value Annotation
Multi-Value Annotation

1) Marker Annotation
---------------------
An annotation that has no method, is called marker annotation. For example:
@interface MyAnnotation{}  
The @Override and @Deprecated are marker annotations.

2) Single-Value Annotation
---------------------------------
An annotation that has one method, is called single-value annotation. For example:
@interface MyAnnotation{  
int value();  
}  

3) Multi-Value Annotation
---------------------------------
An annotation that has more than one method, is called Multi-Value annotation. For example:
@interface MyAnnotation{  
int value1();  
String value2();  
String value3();  
}  

-->Built-In Java Annotations used in java code
@Override
@SuppressWarnings
@Deprecated

@Override
------------
@Override annotation assures that the subclass method is overriding the parent class method. If it is not so, compile time error occurs.

@SuppressWarnings
-------------------
@SuppressWarnings annotation is used to suppress warnings issued by the compiler.

@Deprecated
-------------------
@Deprecated annoation marks that this method is deprecated so compiler prints warning. It informs user that it may be removed in the future versions. So, it is better not to use such methods.

class A{  
void m(){System.out.println("hello m");}  
  
@Deprecated  
void n(){System.out.println("hello n");}  
}  
  
class TestAnnotation3{  
public static void main(String args[]){  
  
A a=new A();  
a.n();  
}}  

Test it Now
At Compile Time:
Note: Test.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details


Retention Policy:
-------------------
-->A retention policy determines at what point an annotation is discarded. Java defines 3 such polices which are encapsulated within the java.lang.annotation.RetentionPolicy enumeration.
-->They are SOURCE, CLASS and RUNTIME.

RetentionPolicy.SOURCE	
----------------------
-->refers to the source code, discarded during compilation. It will not be available in the compiled class.

RetentionPolicy.CLASS
-----------------------
-->refers to the .class file, available to java compiler but not to JVM . It is included in the class file.

RetentionPolicy.RUNTIME	
-----------------------
-->refers to the runtime, available to java compiler and JVM .

@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno{
 String str();
 int val();
}



