<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0027)http://gr5.org/javabean.htm -->
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
 <TITLE>How to make a simple java bean using Netbeans 6.x.x - example shows 
extension of JButton</TITLE> 
<META http-equiv="Content-Type" content="text/html; charset=windows-1252">
<META name="GENERATOR" content="MSHTML 10.00.9200.16578"></HEAD> 
<BODY>
<H1>How to make a simple java bean using Netbeans 6.x.x <FONT size="4">(article 
originally written using Netbeans 6.0.1, but I tried this and it is still 
relevant for netbeans 6.5, netbeans 6.9)</FONT> </H1>I struggled with this.  It 
used to be easier in Netbeans 5.5.1 but they took  the functionality out of 
netbeans.  Why?  well the discussion is here: 
<P><A 
href="http://wiki.netbeans.org/Beans_90907Experiment">http://wiki.netbeans.org/Beans_90907Experiment</A> 
<P>I got most of my answers from this article here: <A href="http://java.sun.com/docs/books/tutorial/javabeans/writingbean/index.html">http://java.sun.com/docs/books/tutorial/javabeans/writingbean/index.html</A> 
<P>
<H2>Step 1 - Create a library </H2>From a fresh opening of netbeans, do:<BR>
file-&gt;new project<BR>for category choose 'java' <BR>for project choose 'java 
class library' <BR>Then choose an appropriate location and name for your 
library.  I chose grlib1 for the name. 
<P>
<H2>Step 2 - Create an empty class </H2>file-&gt;new file<BR>for category choose 
'java'<BR>for file type choose 'Java Class'<BR>click 'next'<BR>Enter an 
appropriate class name.  I chose 'grbuttonx'.<BR>Leave everything else 
untouched. 
<P>
<H2>Step 3 - Make code changes </H2>
<UL>
  <LI>All beans must contain a constructor with no parameters.  My constructor 
  initializes my only property/member variable (img). 
  <LI>All beans must contain 'implements Serializable'.  You don't need to 
  override any of these functions but you have to have that in your class 
  definition.  Serializable lets the IDE save your property values during design 
  time. 
  <LI>Any properties of your bean must have get and set functions if you want to 
  have them show up in property lists.  I only have one property and it is write 
  only so I created a function called 'setImage()'.   
  <LI>Beans apparently need to meet security considerations and so probably 
  won't let you do certain things like access local files. </LI></UL>I wanted a 
button with a cool image so I inherited from JButton.  This gave me all kinds of 
properties and it already serializes everything I care about (don't care about 
the image as this is loaded in runtime).  This is very basic implementation - 
there is no focus image, no down image, no roll over image.  Here's my code: 
<P><CODE></CODE>
<PRE><CODE><FONT color="#0000f0">

package grlib1;
import javax.swing.JButton;
import java.awt.*;
import java.io.Serializable;


/**
 * @author gr@gr5.org
 */
public class grbuttonx extends JButton implements Serializable {
    private Image img;
    public grbuttonx() {
        img=null;
    }
    
    public void setImage(Image i) {
        img=i;
    }
    
     public void paint(Graphics g) {
        if (img != null)
            g.drawImage(img, 0, 0,null);
        else {
            g.setColor(Color.red);
            Dimension size = getSize();
            g.fillOval(0, 0, size.width, size.height);
            }
    }

}
</FONT>
</CODE></PRE><CODE></CODE> 
<H3>Step 4 - Fix manifest to show this is a bean library </H3>First get to the 
files tab of your project (ctrl/2 should get you there).  In the top level of 
the tree view it shows your projects. The next level down should have a file 
called build.xml.  Click the plus sign next to it.  Then double click any 
element below  build.xml.  You should be now editing a file called 
<B>build-impl.xml</B>. 
<P>Search for "&lt;manifest" (I include the open &lt; to simplify the search).  
There should only be one such tag in the file and you should be in the jar 
building section (scroll up to see the next comment block if you want to double 
check). 
<P>There should already be 2 attributes in the manifest.  Add one called 
Java-Bean as shown: <CODE></CODE>
<PRE><CODE><FONT color="#0000f0">
            &lt;manifest&gt;
                &lt;attribute name="Main-Class" value="${main.class}"/&gt;
                &lt;attribute name="Class-Path" value="${jar.classpath}"/&gt;
                &lt;attribute name="Java-Bean" value="true"/&gt;
            &lt;/manifest&gt;

</FONT>
</CODE></PRE><CODE></CODE> 
<P><FONT color="red"><B>Now build your library!</B> </FONT> <BR>&nbsp;	
<P>
<H3>Step 5 - test it! </H3>Create a new project or open an existing project.  
Open a frame or a form or something that allows you to drop buttons onto it.  
Get into <B>design mode</B> so you can see the palette window (if you can't see 
it you can open the palette window and you might want to pin it open with the 
pin  in the title bar). 
<P>In menu system do: tools -&gt; palette -&gt; Swing/AWT Components <BR>there 
should be 3 buttons.  Eventually you might want to choose Add from JAR but we 
will do:<BR>Add From Project... <BR>There may be a delay at this point.  
Navigate if necessary and choose your library project created in step 1.  Click 
next.  <BR>Your component should show up.  Click it and click 'next' again.<BR>
Select a folder to put your bean into - I always choose "Beans".  Click 
'finish'. 
<P>Now you should see your been in the pallette near the bottom in the Beans 
section.  Open up the beans section if it isn't already. Click your bean and 
then click in your window to place it.  That's it. 
<P>
<H3>Step 6 - debugging </H3>If you keep both projects open (the library and the 
project) you can usually make edits in either place and breakpoints in either 
place. I recommend keeping the non-library as the default/main project which 
runs if you hit F6 and keeping a window on your bean for edits and breakpoints.  
Before building your application, build just the bean with the bean code open 
and hit F9 key to build it.  Occasionally you will want to build the whole 
library.  I don't know the IDE well so I choose the library as the main project, 
build it, then go  back to the application project.  Occasionally I go 
completely out of the application and reopen it to get proper design time 
handling of my bean but usually I don't care if it looks like the pre-edited 
bean.  Breakpoints work great. 
<P>Good luck!  <B>If this is useful to you please </B> add a link to this page 
from one of your web pages so that this page will get higher on search order for 
site like google (but only do it if you like this document). Also please email 
me - I always like getting comments/suggestions/whatever.  Really.  If I get too 
much email I will just remove this link.  You can 
<SCRIPT type="text/javascript">
function HiddenMailto(s1,s2)
{document.write('<a href="mailto:'+s1+'@'+s2+'?subject=java beans">');}
HiddenMailto('gr-catskills10','spamarrest.com');
</SCRIPT>
 email me here. </P></BODY></HTML>
