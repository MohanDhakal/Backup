Synchronization:
-->When two or more threads need access to a shared resource, there must be some way to ensure that the resource will be used by only one thread at a time.
--> The process by which this is achieved is called synchronization.
--> Key to synchronization is the concept of the monitor.
--> A monitor is an object that is used as a mutually exclusive lock. Only one thread can own a monitor at a given time. When a thread gets a lock, all other thread will be suspended until the first thread exits the monitor.
--> We just need to use synchronized keyword to get the monitor.







Interthread Communication:
---------------------------
-->Communication between the threads.
-->It is achieved by using the methods wait(), notify() and 
notifyAll() which are defined as final methods in Object class.

wait()-tells the calling thread to give up the monitor and go to sleep until some other thread enters the same monitor and calls notify().

notify()-wakes up a thread that called wait() on the same object.

notifyAll()-wakes up all the threads that called wait on same object.

Method signatures:
final void wait()throws InterruptedException
final void notify()
final void notifyAll()

All of these three methods can only be called from a synchronized context.




Deadlock:
It is a situation that arises when two or more threads are blocked each waiting for other's lock.
Neither of the threads can give up the lock and wait other 
thread for a infinite time period.









