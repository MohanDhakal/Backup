<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0064)http://zetcode.com/tutorials/javaswingtutorial/menusandtoolbars/ -->
<!DOCTYPE html PUBLIC "" ""><HTML lang="en"><HEAD><META content="IE=10.000" 
http-equiv="X-UA-Compatible">
 <TITLE>Menus and toolbars in Java Swing</TITLE> <LINK href="Menus%20and%20toolbars%20in%20Java%20Swing_files/format.css" 
rel="stylesheet" type="text/css"> 
<META charset="utf-8"> 
<META name="keywords" content="Java, Swing, menus, toolbars, JMenuBar, JMenu, JMenuItem, &#10;JToolbar, JPopupMenu, JCheckBoxMenuItem, tutorial, programming, Linux"> 
<META name="description" content="This part of the Java Swing tutorial, we work with menus and &#10;toolbars in Java Swing."> 
<META name="author" content="Jan Bodnar"> 
<SCRIPT src="Menus%20and%20toolbars%20in%20Java%20Swing_files/jquery.js"></SCRIPT>
 
<SCRIPT src="Menus%20and%20toolbars%20in%20Java%20Swing_files/common.js"></SCRIPT>
 
<META name="GENERATOR" content="MSHTML 10.00.9200.16578"></HEAD> 
<BODY>
<DIV class="container">
<DIV class="ltow" id="wide_ad">
<SCRIPT src="Menus%20and%20toolbars%20in%20Java%20Swing_files/f.txt" async=""></SCRIPT>
 <!-- 160x600, August 2011 --> <INS class="adsbygoogle" style="width: 160px; height: 600px; display: inline-block;" 
data-ad-slot="2484182563" data-ad-client="ca-pub-9706709751191532"></INS> 
<SCRIPT>
(adsbygoogle = window.adsbygoogle || []).push({});
</SCRIPT>
 </DIV>
<DIV class="content"><HEADER><NAV><A title="Home" 
href="http://zetcode.com/">Home</A>&nbsp;<A href="http://zetcode.com/tutorials/javaswingtutorial/">Contents</A> 
</NAV></HEADER>
<H1>Menus and toolbars in Java Swing</H1>
<P>A menu is a group of commands located in a menubar. A toolbar has  buttons 
with some common commands in the application. </P>
<DIV class="med_rec">
<SCRIPT src="Menus%20and%20toolbars%20in%20Java%20Swing_files/f.txt" async=""></SCRIPT>
 <!-- NewSquare --> <INS class="adsbygoogle" style="width: 300px; height: 250px; display: inline-block;" 
data-ad-slot="0364418177" data-ad-client="ca-pub-9706709751191532"></INS> 
<SCRIPT>
(adsbygoogle = window.adsbygoogle || []).push({});
</SCRIPT>
 </DIV>
<P>To implement a menubar in Java Swing, we use three objects: a 
<CODE>JMenuBar</CODE>, a  <CODE>JMenu</CODE> and a <CODE>JMenuItem</CODE>. </P>
<H2>Simple menu</H2>
<P>We begin with a simple menubar example.  </P>
<PRE class="code">package com.zetcode;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

public class SimpleMenuEx extends JFrame {

    public SimpleMenuEx() {

        initUI();
    }

    private void initUI() {
        
        createMenuBar();

        setTitle("Simple menu");
        setSize(300, 200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    private void createMenuBar() {

        JMenuBar menubar = new JMenuBar();
        ImageIcon icon = new ImageIcon("exit.png");

        JMenu file = new JMenu("File");
        file.setMnemonic(KeyEvent.VK_F);

        JMenuItem eMenuItem = new JMenuItem("Exit", icon);
        eMenuItem.setMnemonic(KeyEvent.VK_E);
        eMenuItem.setToolTipText("Exit application");
        eMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                System.exit(0);
            }
        });

        file.add(eMenuItem);
        menubar.add(file);

        setJMenuBar(menubar);
    }

    public static void main(String[] args) {

        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                SimpleMenuEx ex = new SimpleMenuEx();
                ex.setVisible(true);
            }
        });
    }
}
</PRE>
<P>Our example will show a menu with one item. Selecting the exit menu  item we 
close the application.  </P>
<PRE class="explanation">JMenuBar menubar = new JMenuBar();
</PRE>
<P>A menubar is created with the <CODE>JMenuBar</CODE> class. </P>
<PRE class="explanation">ImageIcon icon = new ImageIcon("exit.png");
</PRE>
<P>An Exit icon is displayed in the menu.  </P>
<PRE class="explanation">JMenu file = new JMenu("File");
file.setMnemonic(KeyEvent.VK_F);
</PRE>
<P>A menu object is created with the <CODE>JMenu</CODE> class. The menus can be 
accessed  via keyboard as well. To bind a menu to a particular key, we use the 
<CODE>setMnemonic()</CODE> method. In our case, the menu can be opened with the 
<KBD>Alt</KBD>+<KBD>F</KBD> shortcut. </P>
<PRE class="explanation">JMenuItem eMenuItem = new JMenuItem("Exit", icon);
eMenuItem.setMnemonic(KeyEvent.VK_E);
</PRE>
<P>A menu object consists of menu items. A menu item is created with the  
<CODE>JMenuItem</CODE> class. A menu item has its own mnemonic.  It can be 
activated with the <KBD>Alt</KBD>+<KBD>F</KBD>+<KBD>E</KBD> key combination. 
</P>
<PRE class="explanation">eMenuItem.setToolTipText("Exit application");
</PRE>
<P>This code line creates a tooltip for the menu item. </P>
<PRE class="explanation">eMenuItem.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent event) {
        System.exit(0);
    }
});
</PRE>
<P><CODE>JMenuItem</CODE> is a special kind of a button component. We add an 
action listener to it which terminates the application. </P>
<PRE class="explanation">file.add(eMenuItem);
menubar.add(file);
</PRE>
<P>The menu item is added to the menu object and the menu object is inserted 
into the menubar.  </P>
<PRE class="explanation">setJMenuBar(menubar);
</PRE>
<P>The <CODE>setJMenuBar()</CODE> method sets the menubar for the 
<CODE>JFrame</CODE> container. </P><IMG alt="Simple menu" src="Menus%20and%20toolbars%20in%20Java%20Swing_files/simplemenu.png"> 
<DIV class="figure">Figure: Simple menu</DIV>
<H2>Submenu</H2>
<P>Each menu can also have a submenu. This way we can put similar commands  into 
groups. For example we can place commands that hide and show various  toolbars 
like personal bar, address bar, status bar or navigation bar into  a submenu 
called toolbars. Within a menu, we can separate commands with a  separator. The 
separator is a simple line. It is common practice  to separate commands like 
new, open, save from commands like print, print preview with  a single 
separator. In addition to mnemonics, menu commands can be launched via
 accelerators.  </P>
<PRE class="code">package com.zetcode;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;


public class SubmenuEx extends JFrame {

    public SubmenuEx() {
        
        initUI();
    }

    private void initUI() {

        createMenuBar();

        setTitle("Submenu");
        setSize(360, 250);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    
    private void createMenuBar() {
        
        JMenuBar menubar = new JMenuBar();
        
        ImageIcon iconNew = new ImageIcon("new.png");
        ImageIcon iconOpen = new ImageIcon("open.png");
        ImageIcon iconSave = new ImageIcon("save.png");
        ImageIcon iconExit = new ImageIcon("exit.png");

        JMenu fileMenu = new JMenu("File");

        JMenu impMenu = new JMenu("Import");

        JMenuItem newsfMi = new JMenuItem("Import newsfeed list...");
        JMenuItem bookmMi = new JMenuItem("Import bookmarks...");
        JMenuItem mailMi = new JMenuItem("Import mail...");

        impMenu.add(newsfMi);
        impMenu.add(bookmMi);
        impMenu.add(mailMi);

        JMenuItem newMi = new JMenuItem("New", iconNew);
        JMenuItem openMi = new JMenuItem("Open", iconOpen);
        JMenuItem saveMi = new JMenuItem("Save", iconSave);

        JMenuItem exitMi = new JMenuItem("Exit", iconExit);
        exitMi.setToolTipText("Exit application");

        exitMi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                System.exit(0);
            }
        });

        fileMenu.add(newMi);
        fileMenu.add(openMi);
        fileMenu.add(saveMi);
        fileMenu.addSeparator();
        fileMenu.add(impMenu);
        fileMenu.addSeparator();
        fileMenu.add(exitMi);

        menubar.add(fileMenu);

        setJMenuBar(menubar);        
    }
    
    public static void main(String[] args) {
        
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                SubmenuEx ex = new SubmenuEx();
                ex.setVisible(true);
            }
        });
    }
}
</PRE>
<P>This example creates a submenu and separates groups of menu items with  a 
menu separator. </P>
<PRE class="explanation">JMenu impMenu = new JMenu("Import");
...
fileMenu.add(impMenu);
</PRE>
<P>A submenu is just like any other normal menu. It is created the same way.  We 
simply add a menu to existing menu.  </P>
<PRE class="explanation">exitMi.setToolTipText("Exit application");
</PRE>
<P>A tooltip is set to the Exit menu item with the <CODE>setToolTipText()</CODE>
 method. </P>
<PRE class="explanation">JMenuItem newMi = new JMenuItem("New", iconNew);
</PRE>
<P>This <CODE>JMenuItem</CODE> constructor creates a menu item with a label and
 an icon. </P>
<PRE class="explanation">fileMenu.addSeparator();
</PRE>
<P>A separator is a horizontal line that visually separates menu items.  This 
way we can group items into some logical places. </P><IMG alt="Submenu" src="Menus%20and%20toolbars%20in%20Java%20Swing_files/submenu.png"> 
<DIV class="figure">Figure: Submenu</DIV>
<H2>Mnemonics and accelerators</H2>
<P>Mnemonics and accelerators are shortcut keys that enable  executing commands 
via keyboard. Mnemonics navigate the menu hierarchy to select a specific menu 
item whereas accelerators bypass menu hierarchy and directly activate the menu 
item. </P>
<P>The following example utilizes actions, which are objects that can  be shared 
by different components that need the same functionality. </P>
<PRE class="code">package com.zetcode;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import static javax.swing.Action.MNEMONIC_KEY;
import static javax.swing.Action.SMALL_ICON;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;


public class ShortCutsEx extends JFrame {

    public ShortCutsEx() {
        
        initUI();
    }

    private void initUI() {

        createMenuBar();

        setTitle("Mnemonics and accelerators");
        setSize(360, 250);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    
    private void createMenuBar() {
        
        JMenuBar menubar = new JMenuBar();
        
        ImageIcon iconNew = new ImageIcon("new.png");
        ImageIcon iconOpen = new ImageIcon("open.png");
        ImageIcon iconSave = new ImageIcon("save.png");
        ImageIcon iconExit = new ImageIcon("exit.png");

        JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);

        JMenuItem newMi = new JMenuItem(new MenuItemAction("New", iconNew, 
                KeyEvent.VK_N));

        JMenuItem openMi = new JMenuItem(new MenuItemAction("Open", iconOpen, 
                KeyEvent.VK_O));

        JMenuItem saveMi = new JMenuItem(new MenuItemAction("Save", iconSave, 
                KeyEvent.VK_S));

        JMenuItem exitMi = new JMenuItem("Exit", iconExit);
        exitMi.setMnemonic(KeyEvent.VK_E);
        exitMi.setToolTipText("Exit application");
        exitMi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,
            ActionEvent.CTRL_MASK));

        exitMi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                System.exit(0);
            }
        });

        fileMenu.add(newMi);
        fileMenu.add(openMi);
        fileMenu.add(saveMi);
        fileMenu.addSeparator();
        fileMenu.add(exitMi);

        menubar.add(fileMenu);

        setJMenuBar(menubar);        
    }
    
    private class MenuItemAction extends AbstractAction {
        
        public MenuItemAction(String text, ImageIcon icon, 
                Integer mnemonic) {
            super(text);
            
            putValue(SMALL_ICON, icon);
            putValue(MNEMONIC_KEY, mnemonic);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            
            System.out.println(e.getActionCommand());
        }
    }

    public static void main(String[] args) {
        
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                ShortCutsEx ex = new ShortCutsEx();
                ex.setVisible(true);
            }
        });
    }
}
</PRE>
<P>The example has several mnemonics and one accelerator. Three menu items share 
an action object. Selecting those three menu items causes their action commands 
to be printed to the console. </P>
<PRE class="explanation">JMenu fileMenu = new JMenu("File");
fileMenu.setMnemonic(KeyEvent.VK_F);
</PRE>
<P>A mnemonic is set to the File menu. The menu can be activated now with the 
<KBD>Alt</KBD>+<KBD>F</KBD> shortcut key. </P>
<PRE class="explanation">JMenuItem newMi = new JMenuItem(new MenuItemAction("New", iconNew, 
        KeyEvent.VK_N));
</PRE>
<P>The New menu item takes an action object as a parameter. Its constructor
 takes a text label, icon, and a mnemonic key as parameters. </P>
<PRE class="explanation">exitMi.setMnemonic(KeyEvent.VK_E);
</PRE>
<P>The Exit menu item does not use the action object. Its functionality is built
 separately. We call the <CODE>setMnemonic()</CODE> method to set a mnemonic 
key.  To use a mnemonic, the component must be visible on the screen. So we must 
first activate the menu object, which makes the Exit menu item visible, and then 
we can activate this menu item. This means that this menu item is activated by 
the <KBD>Alt</KBD>+<KBD>F</KBD>+<KBD>E</KBD> key combination. </P>
<PRE class="explanation">exitMi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,
    ActionEvent.CTRL_MASK));
</PRE>
<P>An accelerator is a key shortcut that directly launches a menu item. In our 
case,  by pressing <KBD>Ctrl</KBD>+<KBD>W</KBD> we close the application. An 
accelerator is set with the <CODE>setAccelerator()</CODE> method. </P>
<PRE class="explanation">private class MenuItemAction extends AbstractAction {
    
    public MenuItemAction(String text, ImageIcon icon, 
            Integer mnemonic) {
        super(text);
        
        putValue(SMALL_ICON, icon);
        putValue(MNEMONIC_KEY, mnemonic);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
        System.out.println(e.getActionCommand());
    }
}
</PRE>
<P>An instance of this action class is shared by three menu items. Actions use 
various keys to define their functionality.  The <CODE>putValue()</CODE> method 
associates string values with the specified keys. </P><IMG alt="Mnemonics and accelerators" 
src="Menus%20and%20toolbars%20in%20Java%20Swing_files/mnemonicsaccelerators.png"> 
<DIV class="figure">Figure: Mnemonics and accelerators</DIV>
<P>Mnemonics are visually hinted by underlined characters, the accelerators have 
their shortcut keys shown next to the menu item's label. </P>
<H2>JCheckBoxMenuItem</H2>
<P>A <CODE>JCheckBoxMenuItem</CODE> is a menu item that can be selected or 
deselected.  If selected, the menu item typically appears with a checkmark next 
to it.  If unselected or deselected, the menu item appears without a checkmark. 
 Like a regular menu item, a check box menu item can have either text or a 
graphic  icon associated with it, or both. </P>
<PRE class="code">package com.zetcode;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import javax.swing.BorderFactory;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;

public class CheckBoxMenuItemEx extends JFrame {

    private JLabel statusbar;

    public CheckBoxMenuItemEx() {

        initUI();
    }

    private void initUI() {

        createMenuBar();

        statusbar = new JLabel("Ready");
        statusbar.setBorder(BorderFactory.createEtchedBorder());
        add(statusbar, BorderLayout.SOUTH);

        setTitle("JCheckBoxMenuItem");
        setSize(360, 250);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    private void createMenuBar() {

        JMenuBar menubar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);

        JMenu viewMenu = new JMenu("View");
        viewMenu.setMnemonic(KeyEvent.VK_V);

        JCheckBoxMenuItem sbarMi = new JCheckBoxMenuItem("Show statubar");
        sbarMi.setMnemonic(KeyEvent.VK_S);
        sbarMi.setDisplayedMnemonicIndex(5);
        sbarMi.setSelected(true);

        sbarMi.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    statusbar.setVisible(true);
                } else {
                    statusbar.setVisible(false);
                }
                
            }

        });

        viewMenu.add(sbarMi);

        menubar.add(fileMenu);
        menubar.add(viewMenu);

        setJMenuBar(menubar);
    }

    public static void main(String[] args) {

        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                CheckBoxMenuItemEx ex = new CheckBoxMenuItemEx();
                ex.setVisible(true);
            }
        });
    }
}
</PRE>
<P>This example uses a <CODE>JCheckBoxMenuItem</CODE> to toggle the  visibility 
of a statusbar. </P>
<PRE class="explanation">statusbar = new JLabel("Ready");
statusbar.setBorder(BorderFactory.createEtchedBorder());
add(statusbar, BorderLayout.SOUTH);   
</PRE>
<P>The statusbar is a simple <CODE>JLabel</CODE> component. We put a  raised 
<CODE>EtchedBorder</CODE> around the label so that it is visible.  </P>
<PRE class="explanation">JCheckBoxMenuItem sbarMi = new JCheckBoxMenuItem("Show statubar");
sbarMi.setMnemonic(KeyEvent.VK_S);
sbarMi.setDisplayedMnemonicIndex(5);
</PRE>
<P><CODE>JCheckBoxMenuItem</CODE> creates a check box menu item.  There are two 
s letters in the label, therefore, we use the 
<CODE>setDisplayedMnemonicIndex()</CODE> method to choose which  one is going to 
be underlined. We chose the second one. </P>
<PRE class="explanation">sbarMi.setSelected(true);
</PRE>
<P>Because the statusbar is initially visible, we call the 
<CODE>JCheckBoxMenuItem's</CODE> <CODE>setSelected()</CODE> method to select it. 
</P>
<PRE class="explanation">sbarMi.addItemListener(new ItemListener() {

    @Override
    public void itemStateChanged(ItemEvent e) {
        
        if (e.getStateChange() == ItemEvent.SELECTED) {
            statusbar.setVisible(true);
        } else {
            statusbar.setVisible(false);
        }
        
    }

});
</PRE>
<P><CODE>JCheckBoxMenuItem</CODE> is a special kind of a button component. It 
implements the <CODE>ItemSelectable</CODE> interface. An 
<CODE>ItemListener</CODE> can be used to listen to its state changes. Depending 
on its state, we show or  hide the statusbar. </P><IMG alt="CheckBox menu item" 
src="Menus%20and%20toolbars%20in%20Java%20Swing_files/checkboxmenuitem.png"> 
<DIV class="figure">Figure: CheckBox menu item</DIV>
<H2>Menu on the right side</H2>
<P>Some applications display a menu on the right side. Typically, it is a Help 
menu.  </P>
<PRE class="code">package com.zetcode;

import java.awt.EventQueue;
import javax.swing.Box;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;


public class RightMenuEx extends JFrame {
    
    public RightMenuEx() {
        
        initUI();
    }
    
    private void initUI() {
        
        createMenuBar();

        setTitle("Right menu");
        setSize(300, 200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);        
    }

    private void createMenuBar() {
        
        JMenuBar menubar = new JMenuBar();

        JMenu fileMenu = new JMenu("File");
        JMenu viewMenu = new JMenu("View");
        JMenu toolsMenu = new JMenu("Tools");
        JMenu helpMenu = new JMenu("Help");

        menubar.add(fileMenu);
        menubar.add(viewMenu);
        menubar.add(toolsMenu);        
        menubar.add(Box.createHorizontalGlue());
        menubar.add(helpMenu);

        setJMenuBar(menubar);        
    }

    public static void main(String[] args) {
        
        EventQueue.invokeLater(new Runnable() {            
            @Override
            public void run() {                
                RightMenuEx ex = new RightMenuEx();
                ex.setVisible(true);                
            }
        });
    }
}
</PRE>
<P>The example shows three menus on the left and one menu on the right.  </P>
<PRE class="explanation">JMenuBar menubar = new JMenuBar();

JMenu fileMenu = new JMenu("File");
JMenu viewMenu = new JMenu("View");
JMenu toolsMenu = new JMenu("Tools");
JMenu helpMenu = new JMenu("Help");
</PRE>
<P>A menubar and four menu objects are created.  </P>
<PRE class="explanation">menubar.add(fileMenu);
menubar.add(viewMenu);
menubar.add(toolsMenu);        
menubar.add(Box.createHorizontalGlue());
menubar.add(helpMenu);
</PRE>
<P>After three menus are added, we add a horizontal glue to the menubar. A glue 
absorbs all the extra space available. This will push the help menu to the right 
of the menubar. </P><IMG alt="Help menu on the right" src="Menus%20and%20toolbars%20in%20Java%20Swing_files/rightmenu.png"> 
<DIV class="figure">Figure: Help menu on the right</DIV>
<H2>A popup menu</H2>
<P>Another type of a menu is a popup menu. Java Swing has a 
<CODE>JPopupMenu</CODE> class for this functionality. It is also called a 
context menu and usually shown when we right click on a component. The idea is 
to provide  only the commands that are relevant in the current context. Say we 
have an image.  By right clicking on the image, we get a popup window with 
commands to save, scale,  or move the image.  </P>
<PRE class="code">package com.zetcode;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

public class PopupMenuEx extends JFrame {

    private JPopupMenu pmenu;

    public PopupMenuEx() {

        initUI();
    }

    private void initUI() {

        createPopupMenu();

        setTitle("JPopupMenu");
        setSize(300, 250);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private void createPopupMenu() {

        pmenu = new JPopupMenu();
        
        JMenuItem maxMi = new JMenuItem("Maximize");
        maxMi.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent e) {

                if (getExtendedState() != JFrame.MAXIMIZED_BOTH) {
                    setExtendedState(JFrame.MAXIMIZED_BOTH);
                }

            }
        });

        pmenu.add(maxMi);

        JMenuItem quitMi = new JMenuItem("Quit");
        quitMi.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        pmenu.add(quitMi);

        addMouseListener(new MouseAdapter() {

            @Override
            public void mouseReleased(MouseEvent e) {

                if (e.getButton() == MouseEvent.BUTTON3) {
                    pmenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
    }

    public static void main(String[] args) {

        EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                PopupMenuEx pm = new PopupMenuEx();
                pm.setVisible(true);
            }
        });
    }
}
</PRE>
<P>The example shows a popup menu with two commands. The first command maximizes 
the window, the second quits the application. </P>
<PRE class="explanation">pmenu = new JPopupMenu();
</PRE>
<P><CODE>JPopupMenu</CODE> creates a popup menu. </P>
<PRE class="explanation">JMenuItem maxMi = new JMenuItem("Maximize");
maxMi.addActionListener(new ActionListener() {
    
    @Override
    public void actionPerformed(ActionEvent e) {

        if (getExtendedState() != JFrame.MAXIMIZED_BOTH) {
            setExtendedState(JFrame.MAXIMIZED_BOTH);
        }

    }
});
</PRE>
<P>A popup menu consists of <CODE>JMenuItems</CODE>. This item will maximize the 
frame. The <CODE>getExtendedState()</CODE> method determines the state of the 
frame. The available states are: <CODE>NORMAL</CODE>,  <CODE>ICONIFIED</CODE>, 
<CODE>MAXIMIZED_HORIZ</CODE>, <CODE>MAXIMIZED_VERT</CODE>, and 
<CODE>MAXIMIZED_BOTH</CODE>. </P>
<PRE class="explanation">pmenu.add(maxMi);
</PRE>
<P>The menu item is inserted into the popup menu. </P>
<PRE class="explanation">addMouseListener(new MouseAdapter() {

    @Override
    public void mouseReleased(MouseEvent e) {

        if (e.getButton() == MouseEvent.BUTTON3) {
            pmenu.show(e.getComponent(), e.getX(), e.getY());
        }
    }
});
</PRE>
<P>The popup menu is shown where we clicked with the mouse button. The  
<CODE>MouseEvent.BUTTON3</CODE> constant enables the popup menu only for the 
right mouse clicks. </P><IMG alt="Popup menu" src="Menus%20and%20toolbars%20in%20Java%20Swing_files/popupmenu.png"> 
<DIV class="figure">Figure: Popup menu</DIV>
<H2>JToolbar</H2>
<P>Menus group commands that we can use in an application. Toolbars provide a 
quick access  to the most frequently used commands. In Java Swing, the 
<CODE>JToolBar</CODE> class creates a toolbar in an application. </P>
<PRE class="code">package com.zetcode;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JToolBar;


public class ToolbarEx extends JFrame {

    public ToolbarEx() {
        
        initUI();
    }

    private void initUI() {
        
        createMenuBar();
        createToolBar();

        setTitle("Simple toolbar");
        setSize(300, 200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    
    private void createMenuBar() {
        
        JMenuBar menubar = new JMenuBar();
        JMenu file = new JMenu("File");
        menubar.add(file);
        setJMenuBar(menubar);        
    }
    
    private void createToolBar() {
        
        JToolBar toolbar = new JToolBar();

        ImageIcon icon = new ImageIcon("exit.png");

        JButton exitButton = new JButton(icon);
        toolbar.add(exitButton);
        
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                System.exit(0);
            }
        });

        add(toolbar, BorderLayout.NORTH);        
    }

    public static void main(String[] args) {
        
        EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                ToolbarEx ex = new ToolbarEx();
                ex.setVisible(true);
            }
        });
    }
}
</PRE>
<P>The example creates a toolbar with one exit button. </P>
<PRE class="explanation">JToolBar toolbar = new JToolBar();
</PRE>
<P>A toolbar is created with <CODE>JToolBar</CODE>. </P>
<PRE class="explanation">JButton exitButton = new JButton(icon);
toolbar.add(exitButton);
</PRE>
<P>We create a button and add it to the toolbar. </P>
<PRE class="explanation">add(toolbar, BorderLayout.NORTH);
</PRE>
<P>The toolbar is placed to the north area of the <CODE>BorderLayout</CODE>.  
</P><IMG alt="Simple toolbar" src="Menus%20and%20toolbars%20in%20Java%20Swing_files/simpletoolbar.png"> 
<DIV class="figure">Figure: Simple toolbar</DIV>
<H2>Toolbars</H2>
<P>Often more than one toolbar is displayed on the window. </P>
<PRE class="code">package com.zetcode;

import java.awt.Container;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JToolBar;


public class ToolbarsEx extends JFrame {

    public ToolbarsEx() {
        
        initUI();
    }

    public final void initUI() {

        createToolBars();

        setTitle("Toolbars");
        setSize(360, 250);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    
    private void createToolBars() {
        
        JToolBar toolbar1 = new JToolBar();
        JToolBar toolbar2 = new JToolBar();

        ImageIcon newi = new ImageIcon("new.png");
        ImageIcon open = new ImageIcon("open.png");
        ImageIcon save = new ImageIcon("save.png");
        ImageIcon exit = new ImageIcon("exit.png");

        JButton newb = new JButton(newi);
        JButton openb = new JButton(open);
        JButton saveb = new JButton(save);

        toolbar1.add(newb);
        toolbar1.add(openb);
        toolbar1.add(saveb);

        JButton exitb = new JButton(exit);
        toolbar2.add(exitb);

        exitb.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent event) {
                System.exit(0);
            }

        });

        createLayout(toolbar1, toolbar2);    
    }
    
    private void createLayout(JComponent... arg) {
        
        Container pane = getContentPane();
        GroupLayout gl = new GroupLayout(pane);
        pane.setLayout(gl);

        gl.setHorizontalGroup(gl.createParallelGroup()
                .addComponent(arg[0], GroupLayout.DEFAULT_SIZE, 
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(arg[1], GroupLayout.DEFAULT_SIZE, 
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        gl.setVerticalGroup(gl.createSequentialGroup()
                .addComponent(arg[0])
                .addComponent(arg[1])
        );
    }

    public static void main(String[] args) {
        
        EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                ToolbarsEx ex = new ToolbarsEx();
                ex.setVisible(true);
            }
        });
    }
}
</PRE>
<P>Two toolbars are displayed at the top of the window. </P>
<PRE class="explanation">JToolBar toolbar1 = new JToolBar();
JToolBar toolbar2 = new JToolBar();
</PRE>
<P>Two toolbar objects are created. </P>
<PRE class="explanation">private void createLayout(JComponent... arg) {
    
    Container pane = getContentPane();
    GroupLayout gl = new GroupLayout(pane);
    pane.setLayout(gl);

    gl.setHorizontalGroup(gl.createParallelGroup()
            .addComponent(arg[0], GroupLayout.DEFAULT_SIZE, 
                    GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(arg[1], GroupLayout.DEFAULT_SIZE, 
                    GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    gl.setVerticalGroup(gl.createSequentialGroup()
            .addComponent(arg[0])
            .addComponent(arg[1])
    );
}
</PRE>
<P><CODE>GroupLayout</CODE> manager is used to position the toolbars at the top 
of the container. </P><IMG alt="Toolbars" src="Menus%20and%20toolbars%20in%20Java%20Swing_files/toolbars.png"> 
<DIV class="figure">Figure: Toolbars</DIV>
<P>In this part of the Java Swing tutorial, we have mentioned menus and
 toolbars. </P>
<DIV class="hor">
<SCRIPT src="Menus%20and%20toolbars%20in%20Java%20Swing_files/f.txt" async=""></SCRIPT>
 <!-- horizontal --> <INS class="adsbygoogle" style="width: 468px; height: 60px; display: inline-block;" 
data-ad-slot="1734478269" data-ad-client="ca-pub-9706709751191532"></INS> 
<SCRIPT>
(adsbygoogle = window.adsbygoogle || []).push({});
</SCRIPT>
 </DIV><FOOTER><NAV class="center"><SPAN class="botNavItem"><A href="http://zetcode.com/">Home</A></SPAN> 
‡ <SPAN class="botNavItem"><A href="http://zetcode.com/tutorials/javaswingtutorial/">Contents</A></SPAN> 
‡  <SPAN class="botNavItem"><A href="http://zetcode.com/tutorials/javaswingtutorial/menusandtoolbars/#">Top 
of Page</A></SPAN> </NAV>
<DIV class="signature"><A href="http://zetcode.com/">ZetCode</A> last modified 
February 15, 2015  <SPAN class="copyright">© 2007 - 2015 Jan Bodnar</SPAN> 
</DIV> </FOOTER></DIV><!-- content --> </DIV><!-- container --> </BODY></HTML>
