Type Casting:
------------------
-->Converting from one data type to another data type.
-->it is of two types:

a. Implicit Type casting (Automatic type casting)
 --> Also called widening.
 -->smaller type is converted to bigger type.

   for eg:   1. int a=20;
		double b=a;

b. Explicit Type Casting:
--> Also called narrowing
--> bigger type is converted to smaller type.

eg. double b=20.5;
    int a=(int)b; // a will contain 20

    int a=20;
    byte b=(byte)a; //b will contain 20

	
	int a=257;
	byte b=(byte)a; // b will contain 1.




Token:
--------------
--> A token is the smallest individual unit in a program that can be compiled.
-->A token can be:
1. Comment      // single line

		/*.....
	           .....    multiple line
		......*/

	      /** ......
		.......
		......*/    documentation comment
2. Whitespace
	space, tab, line feed

3. Keywords (Reserved words)
	eg. if, for, int, long, break, continue etc.
4. Identifier:
	name of variable, function , class. 
	special characters -- $, _ (underscore) only
5. Separator:
	: ;  , ( )  {}  []  .

6. Literals (constants)
	Integer constant   10  -2 etc
	Floating point constant   4.5   -2.3  etc.
	Character constant    'a'  '2' etc.
	String constant    "Ram"   "Ktm"   "Boudha-6" etc.
	Boolean Constant   true false

7. Operators
	
--------------------------------------------------------------------

Operators:
1. Arithmetic Operators:   + -  *  /  %
2. Logical Operators   && (AND)   || (OR)   ! (NOT)
3. Relational/Comparison Operators 
	>   <  >= <=  !=
4. Assignment Operators
	=  +=  -=   *=   /=  %=
    for eg. a+=2  ---------> a=a+2
5. Equality Operator
	==
6. Unary operators:
	++  (increment by 1)
	-- (decrease by 1)
7. Conditional/Ternary Operator
	?:
   eg: expresssion?result if true:result if false
      int a=10,b=20;
	a>b?S.o.p(a):S.o.p(b);

8. Bitwise Operators
   a. Bitwise OR  (|)  -->results 1 if either of the operands have 1
	eg. int a=5;    //101
	    int b=6;    //110
	    int c=a|b;  //111
	    S.o.p(c);  output 7
   b. Bitwise AND  (&)   --> results 1 if both operands have 1
	   int c=a&b;   //100
	   S.o.p(c);   output 4
   c. Bitwise XOR (^)  -->Results 1 if both operands are different
	   int c=a^b;  //011
	   S.o.p(c);   output 3
   d. Bitwise Compliment (~)-->reverses the bits. works only with 1                                operands
			-->however a computer only understands 2's                     complement. 2's complement of a number n = -(n+1)
	   int c=~a;
	  S.o.p(c);   output  -6
    e. Left Shift (<<) --> shifts the bits to the left specified no. of                             times 

	S.o.p(a<<1); output: 10
        S.o.p(a<<2);  output: 20
    f. Right Shift (>>) --> Shifts the bits to the right specified no. of 			   times

	S.o.p(a>>1);  output   2
	S.o.p(a>>2);   output   1
    g. Unsigned Right Shift (>>>) --> shifts the bits to the right and fills the left with 0. does not give negative value.
       S.o.p(a>>>1);  output:   2
       S.o.p(-a>>>1); 








	





	